"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import task.task_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TaskRpcStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    fetchTask: grpc.UnaryUnaryMultiCallable[
        task.task_pb2.FetchTaskBaseRequest,
        task.task_pb2.FetchTaskBaseResponse,
    ]

    updateTaskStatus: grpc.UnaryUnaryMultiCallable[
        task.task_pb2.UpdateTaskBaseRequest,
        task.task_pb2.UpdateTaskBaseResponse,
    ]

class TaskRpcAsyncStub:
    fetchTask: grpc.aio.UnaryUnaryMultiCallable[
        task.task_pb2.FetchTaskBaseRequest,
        task.task_pb2.FetchTaskBaseResponse,
    ]

    updateTaskStatus: grpc.aio.UnaryUnaryMultiCallable[
        task.task_pb2.UpdateTaskBaseRequest,
        task.task_pb2.UpdateTaskBaseResponse,
    ]

class TaskRpcServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def fetchTask(
        self,
        request: task.task_pb2.FetchTaskBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[task.task_pb2.FetchTaskBaseResponse, collections.abc.Awaitable[task.task_pb2.FetchTaskBaseResponse]]: ...

    @abc.abstractmethod
    def updateTaskStatus(
        self,
        request: task.task_pb2.UpdateTaskBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[task.task_pb2.UpdateTaskBaseResponse, collections.abc.Awaitable[task.task_pb2.UpdateTaskBaseResponse]]: ...

def add_TaskRpcServicer_to_server(servicer: TaskRpcServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
